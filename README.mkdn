# FCAnimationFactory (Alpha stage)

`FCAnimationFactory` is an objective-c library for generating
`CAKeyFrameAnimation` with custom timing functions including cubic, quadratic,
or even elastic functions. 

The main difference between [AHEasing][AHEasing] and `FCAnimationFactory` is that
[AHEasing][AHEasing] create every frames for `CAKeyFrameAnimation`, which breaks
Core Animation model-presentation rendering pipeline. `FCAnimationFactory` use
standard `CAMediaTimingFunction` to tell `CAKeyFrameAnimation` the timing and
let it deals with frames itself. The challenge is not only timing needs to be
interpolated, values (numbers, colors, path) also need to be interpolated as
well. 

## SYNOPSIS

High level animation API:

        [CATransaction begin];
        [CATransaction setDisableActions:YES];
        _layer.position = CGPointMake(160.f, 300.f);
        CAKeyframeAnimation *animation = [FCValueAnimationFactory animationWithName:@"elasticEaseOut"
                                                                          fromValue:[NSValue valueWithCGPoint:CGPointMake(320,50)]
                                                                            toValue:[NSValue valueWithCGPoint:CGPointMake(160,300)]
                                                                           duration:@2.5f];
        animation.keyPath = @"position";
        [_layer addAnimation:animation forKey:@"positionKey"];
        [CATransaction commit];

Create your own timing function directly with `FCValueAnimationFactory`:

    factory = [[FCValueAnimationFactory alloc] init];
    factory.timingBlocks = [NSArray arrayWithObject:^float(float x){
        return x*x*x*x*x;
    }];
    factory.normalizedValues = @[ @0.f, @1.f];
    factory.normalizedTimings = @[ @0.f, @1.f];
    factory.totalDuration = [NSNumber numberWithFloat:2.5f];
    factory.fromValue = @1.0f;
    factory.toValue = @0.5f;
    CAKeyframeAnimation *animation = [factory animation];
    animation.keyPath = @"opacity";

    [_layer addAnimation: animation forKey:@"opacityKey"]

Clone the project and see example usage in `FCAnimationDemo` target.

### Animatable properties

#### Single float number

* `borderWidth`
* `cornerRadius`
* `opacity`
* `shadowOpacity`
* `shadowRadius`
* `zPosition`

Use `[NSNumber numberWithFloat: myFloat]` or objective-c literal `@3.5f` for
`fromValue` and `toValue`.

    CAKeyframeAnimation *animation = [FCValueAnimationFactory animationWithName:@"elasticEaseOut"
                                                                      fromValue:@1.f
                                                                        toValue:@0.f
                                                                       duration:@2.5f];
    animation.keyPath = @"shadowOpacity";
    
#### CGPoint

* `anchorPoint`
* `position`

Use `[NSValue valueWithCGPoint: point]`.

#### CGSize

* `shadowOffset`

Use `[NSValue valueWithCGSize: myOffset]`.

#### Frames and bounds

Use `[NSValue valueWithCGRect: bounds]`.

### Properties under cunstruction

* `backgroundColor`, `borderColor`, and `shadowColor`.
* `transform` and `sublayerTransform`
* `countents` I'll use CATransition to made another class to animate contents.
* `path` property in `CAKeyFrameAnimation`.

### Property won't be supported

* doubleSided
* hidden
* maskToBounds
* mask
* filters
* subLayers

These properties will present the final value at the begining of animation.
You don't need `FCAnimationFactory` to interpolate these boolean or filter
values. You only need `CABasicAnimation` or `CAKeyFrameAnimation` to setup
timestamp when it need changes.

### Timing block/function names

* linear
* quadraticEaseIn
* quadraticEaseOut
* quadraticEaseInOut
* cubicEaseIn
* cubicEaseOut
* cubicEaseInOut
* quarticEaseIn
* quarticEaseOut
* quarticEaseInOut
* quinticEaseIn
* quinticEaseOut
* quinticEaseInOut
* sineEaseIn
* sineEaseOut
* sineEaseInOut
* circularEaseIn
* circularEaseOut
* circularEaseInOut
* expEaseIn
* expEaseOut
* expEaseInOut
* elasticEaseIn
* elasticEaseOut
* backEaseIn
* backEaseOut

## INSTALL

Clone the project and drag these files into your own project:

    FCAnimationFactory.h
    FCAnimationFactory.m
    FCValueAnimationFactory.h
    FCValueAnimationFactory.m

The project is still under heavy development. Pull requests are welcome ;)

## TODOS

* Write complete API references, use [appledoc](http://gentlebytes.com/appledoc/).

* `FCPathAnimationFactory` can create cubic path on `position` or other 2D
  movement animation.

* Rename `FCValueAnimationFactory` to `FCBasicAnimationFactory`.
 `FCBasicAnimationFactory` is opaque class with built-in timing functions,
  `FCValueAnimationFactory` is more transparent and customizable.

* Draw timing block diagrams

## LICENSE

 Created by Felix Chern on 12/10/15.
 Copyright (c) 2012 Felix R. Chern. All rights reserved. (BSD LICENSE)
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.
 * Neither the name of the FCAnimationFactory nor the
 names of its contributors may be used to endorse or promote products
 derived from this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL FELIX R. CHERN BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
## SEE ALSO

* [AHEasing][AHEasing]
* [IRAnimationQueue](https://github.com/evadne/IRAnimationQueue-Experimental)


[AHEasing]: https://github.com/warrenm/AHEasing
